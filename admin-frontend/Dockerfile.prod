# Production
FROM node:18-alpine AS builder

# Copy full repository so shared/ and other folders are available
WORKDIR /app
COPY . .

# Allow overriding API/socket URLs at build time. Default to host.docker.internal so
# frontend built inside Docker can reach services running on the Docker host (Windows/Mac).
ARG NEXT_PUBLIC_API_URL=http://host.docker.internal:3001
ARG NEXT_PUBLIC_SOCKET_URL=http://host.docker.internal:3001
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_SOCKET_URL=${NEXT_PUBLIC_SOCKET_URL}

# Build frontend inside /app/admin-frontend
WORKDIR /app/admin-frontend

# Install dependencies
COPY admin-frontend/package*.json ./
RUN npm install --no-audit --no-fund

# Copy frontend source and build
COPY admin-frontend/. ./
RUN npm run build

# Debug: list .next contents to help troubleshoot missing standalone/static during Docker build
RUN ls -la /app/admin-frontend/.next || true

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Copy built application from builder's /app/admin-frontend
COPY --from=builder --chown=nodejs:nodejs /app/admin-frontend/.next/standalone ./
COPY --from=builder --chown=nodejs:nodejs /app/admin-frontend/.next/static ./.next/static
COPY --from=builder --chown=nodejs:nodejs /app/admin-frontend/public ./public

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Start the application
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]
