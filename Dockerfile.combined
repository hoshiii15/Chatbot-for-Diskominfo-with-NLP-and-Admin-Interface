# Combined demo image: builds frontend+backend and runs python-bot, admin-backend, admin-frontend + nginx under supervisord
# Not intended for production. Use for single-container demo only.

# Builder stage (node) to build admin-frontend and admin-backend
FROM node:18-bullseye AS builder

WORKDIR /build

# Copy frontend and backend source into builder
COPY admin-frontend/ ./admin-frontend/
COPY admin-backend/ ./admin-backend/
COPY shared/ ./shared/

# Build admin-frontend (install dev deps to allow Next.js build)
WORKDIR /build/admin-frontend
# Use npm ci when lockfile present for reproducible installs
RUN if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then \
    npm ci --legacy-peer-deps; \
    else \
    npm i --legacy-peer-deps; \
    fi \
    && npm run build

# Build admin-backend (TypeScript build). Install dev deps first, run tsc
WORKDIR /build/admin-backend
RUN if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then \
    npm ci --legacy-peer-deps --include=dev; \
    else \
    npm i --legacy-peer-deps; \
    fi \
    && npm run build

# Final image - include Node (runtime) and Python
FROM node:18-bullseye-slim

ENV DEBIAN_FRONTEND=noninteractive

# Install system deps, Python, pip, supervisord and build tools for Python packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    python3 python3-pip python3-venv python3-dev build-essential \
    supervisor curl ca-certificates git \
    && rm -rf /var/lib/apt/lists/*

# Create app directories
WORKDIR /app
RUN mkdir -p /app/python-bot /srv/admin-frontend /srv/admin-backend /app/logs /app/backups

# Copy built frontend from builder (next.js .next and public/static files)
COPY --from=builder /build/admin-frontend/.next /srv/admin-frontend/.next
COPY --from=builder /build/admin-frontend/package.json /srv/admin-frontend/package.json

# Copy built backend dist from builder
COPY --from=builder /build/admin-backend/dist /srv/admin-backend/dist
COPY --from=builder /build/admin-backend/package.json /srv/admin-backend/package.json
# Copy SQLite DB if present in the repo so runtime has prepopulated data
COPY admin-backend/database.sqlite /srv/admin-backend/database.sqlite
RUN chmod 644 /srv/admin-backend/database.sqlite || true

# Normalize backend dist layout: some builds nest compiled files under dist/admin-backend/src
# Move JS files up so `node dist/app.js` exists at runtime
RUN if [ -d /srv/admin-backend/dist/admin-backend/src ]; then \
    mkdir -p /srv/admin-backend/dist && \
    mv /srv/admin-backend/dist/admin-backend/src/* /srv/admin-backend/dist/ || true; \
    fi || true

# Copy python-bot source and requirements
COPY python-bot/ /app/python-bot/
COPY python-bot/requirements.txt /app/python-bot/requirements.txt

# Copy helper scripts
COPY admin-backend/start-backend.sh /srv/admin-backend/start-backend.sh
RUN chmod +x /srv/admin-backend/start-backend.sh || true

# Install Python requirements (allow image build to continue if pip has issues)
RUN python3 -m pip install --upgrade pip setuptools wheel \
    && python3 -m pip install --no-cache-dir -r /app/python-bot/requirements.txt || echo "pip install had issues"

# Install production node modules for frontend and backend
WORKDIR /srv/admin-frontend
RUN if [ -f package.json ]; then npm ci --production --legacy-peer-deps || npm install --omit=dev --legacy-peer-deps; fi

WORKDIR /srv/admin-backend
RUN if [ -f package.json ]; then npm ci --production --legacy-peer-deps || npm install --omit=dev --legacy-peer-deps; fi

# Ensure python-bot data is present where admin-backend expects it (copy to multiple candidate locations)
RUN set -eux; \
    mkdir -p /srv/admin-backend/dist/python-bot/data /srv/admin-backend/python-bot/data /app/python-bot/data /python-bot/data; \
    cp -a /app/python-bot/data/. /srv/admin-backend/dist/python-bot/data || true; \
    cp -a /app/python-bot/data/. /srv/admin-backend/python-bot/data || true; \
    cp -a /app/python-bot/data/. /app/python-bot/data || true; \
    cp -a /app/python-bot/data/. /python-bot/data || true; \
    chmod -R a+rwX /srv/admin-backend/dist/python-bot /srv/admin-backend/python-bot /app/python-bot /python-bot || true

# Supervisord config
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Expose service ports (no nginx)
EXPOSE 3000 3001 5000

# Ensure correct permissions
RUN chown -R root:root /app /srv/admin-frontend /srv/admin-backend

# Start supervisord (foreground)
CMD ["/usr/bin/supervisord", "-n", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
